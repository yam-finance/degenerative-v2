/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EmpInterface extends ethers.utils.Interface {
  functions: {
    "cancelTransferPosition()": FunctionFragment;
    "cancelWithdrawal()": FunctionFragment;
    "collateralCurrency()": FunctionFragment;
    "collateralRequirement()": FunctionFragment;
    "contractState()": FunctionFragment;
    "create(tuple,tuple)": FunctionFragment;
    "createLiquidation(address,tuple,tuple,tuple,uint256)": FunctionFragment;
    "cumulativeFeeMultiplier()": FunctionFragment;
    "deposit(tuple)": FunctionFragment;
    "depositTo(address,tuple)": FunctionFragment;
    "dispute(uint256,address)": FunctionFragment;
    "disputeBondPct()": FunctionFragment;
    "disputerDisputeRewardPct()": FunctionFragment;
    "emergencyShutdown()": FunctionFragment;
    "excessTokenBeneficiary()": FunctionFragment;
    "expirationTimestamp()": FunctionFragment;
    "expire()": FunctionFragment;
    "expiryPrice()": FunctionFragment;
    "finder()": FunctionFragment;
    "getCollateral(address)": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getLiquidations(address)": FunctionFragment;
    "liquidationLiveness()": FunctionFragment;
    "liquidations(address,uint256)": FunctionFragment;
    "minSponsorTokens()": FunctionFragment;
    "payRegularFees()": FunctionFragment;
    "pfc()": FunctionFragment;
    "positions(address)": FunctionFragment;
    "priceIdentifier()": FunctionFragment;
    "rawLiquidationCollateral()": FunctionFragment;
    "rawTotalPositionCollateral()": FunctionFragment;
    "redeem(tuple)": FunctionFragment;
    "remargin()": FunctionFragment;
    "requestTransferPosition()": FunctionFragment;
    "requestWithdrawal(tuple)": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "settleExpired()": FunctionFragment;
    "sponsorDisputeRewardPct()": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "tokenCurrency()": FunctionFragment;
    "totalPositionCollateral()": FunctionFragment;
    "totalTokensOutstanding()": FunctionFragment;
    "transferPositionPassedRequest(address)": FunctionFragment;
    "trimExcess(address)": FunctionFragment;
    "withdraw(tuple)": FunctionFragment;
    "withdrawLiquidation(uint256,address)": FunctionFragment;
    "withdrawPassedRequest()": FunctionFragment;
    "withdrawalLiveness()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelTransferPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [{ rawValue: BigNumberish }, { rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "createLiquidation",
    values: [
      string,
      { rawValue: BigNumberish },
      { rawValue: BigNumberish },
      { rawValue: BigNumberish },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeFeeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTo",
    values: [string, { rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "dispute",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeBondPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputerDisputeRewardPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excessTokenBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expirationTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expire", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expiryPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidations",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minSponsorTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payRegularFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pfc", values?: undefined): string;
  encodeFunctionData(functionFragment: "positions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "priceIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawLiquidationCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawTotalPositionCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "remargin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestTransferPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleExpired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorDisputeRewardPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPositionCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensOutstanding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferPositionPassedRequest",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "trimExcess", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidation",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPassedRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalLiveness",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelTransferPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dispute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeBondPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputerDisputeRewardPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excessTokenBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expire", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expiryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minSponsorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payRegularFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pfc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawLiquidationCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawTotalPositionCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remargin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestTransferPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorDisputeRewardPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPositionCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensOutstanding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPositionPassedRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trimExcess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPassedRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalLiveness",
    data: BytesLike
  ): Result;

  events: {
    "ContractExpired(address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "DisputeSettled(address,address,address,address,uint256,bool)": EventFragment;
    "EmergencyShutdown(address,uint256,uint256)": EventFragment;
    "EndedSponsorPosition(address)": EventFragment;
    "FinalFeesPaid(uint256)": EventFragment;
    "LiquidationCreated(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LiquidationDisputed(address,address,address,uint256,uint256)": EventFragment;
    "LiquidationWithdrawn(address,uint256,uint8,uint256)": EventFragment;
    "NewSponsor(address)": EventFragment;
    "PositionCreated(address,uint256,uint256)": EventFragment;
    "Redeem(address,uint256,uint256)": EventFragment;
    "RegularFeesPaid(uint256,uint256)": EventFragment;
    "RequestTransferPosition(address)": EventFragment;
    "RequestTransferPositionCanceled(address)": EventFragment;
    "RequestTransferPositionExecuted(address,address)": EventFragment;
    "RequestWithdrawal(address,uint256)": EventFragment;
    "RequestWithdrawalCanceled(address,uint256)": EventFragment;
    "RequestWithdrawalExecuted(address,uint256)": EventFragment;
    "SettleExpiredPosition(address,uint256,uint256)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyShutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndedSponsorPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalFeesPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationDisputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSponsor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegularFeesPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestTransferPosition"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequestTransferPositionCanceled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequestTransferPositionExecuted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettleExpiredPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class Emp extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EmpInterface;

  functions: {
    cancelTransferPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelTransferPosition()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelWithdrawal()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralCurrency(overrides?: CallOverrides): Promise<[string]>;

    "collateralCurrency()"(overrides?: CallOverrides): Promise<[string]>;

    collateralRequirement(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "collateralRequirement()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    contractState(overrides?: CallOverrides): Promise<[number]>;

    "contractState()"(overrides?: CallOverrides): Promise<[number]>;

    create(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "create((uint256),(uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLiquidation(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createLiquidation(address,(uint256),(uint256),(uint256),uint256)"(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cumulativeFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "cumulativeFeeMultiplier()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTo(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositTo(address,(uint256))"(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dispute(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "dispute(uint256,address)"(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputeBondPct(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "disputeBondPct()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    disputerDisputeRewardPct(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "disputerDisputeRewardPct()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    emergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyShutdown()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excessTokenBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    "excessTokenBeneficiary()"(overrides?: CallOverrides): Promise<[string]>;

    expirationTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "expirationTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    expire(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "expire()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expiryPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "expiryPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    "finder()"(overrides?: CallOverrides): Promise<[string]>;

    getCollateral(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { rawValue: BigNumber }] & {
        collateralAmount: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    "getCollateral(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { rawValue: BigNumber }] & {
        collateralAmount: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidations(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          number,
          BigNumber,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          string,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber }
        ] & {
          sponsor: string;
          liquidator: string;
          state: number;
          liquidationTime: BigNumber;
          tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
          lockedCollateral: [BigNumber] & { rawValue: BigNumber };
          liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
          rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
          disputer: string;
          settlementPrice: [BigNumber] & { rawValue: BigNumber };
          finalFee: [BigNumber] & { rawValue: BigNumber };
        })[]
      ] & {
        liquidationData: ([
          string,
          string,
          number,
          BigNumber,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          string,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber }
        ] & {
          sponsor: string;
          liquidator: string;
          state: number;
          liquidationTime: BigNumber;
          tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
          lockedCollateral: [BigNumber] & { rawValue: BigNumber };
          liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
          rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
          disputer: string;
          settlementPrice: [BigNumber] & { rawValue: BigNumber };
          finalFee: [BigNumber] & { rawValue: BigNumber };
        })[];
      }
    >;

    "getLiquidations(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          number,
          BigNumber,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          string,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber }
        ] & {
          sponsor: string;
          liquidator: string;
          state: number;
          liquidationTime: BigNumber;
          tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
          lockedCollateral: [BigNumber] & { rawValue: BigNumber };
          liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
          rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
          disputer: string;
          settlementPrice: [BigNumber] & { rawValue: BigNumber };
          finalFee: [BigNumber] & { rawValue: BigNumber };
        })[]
      ] & {
        liquidationData: ([
          string,
          string,
          number,
          BigNumber,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber },
          string,
          [BigNumber] & { rawValue: BigNumber },
          [BigNumber] & { rawValue: BigNumber }
        ] & {
          sponsor: string;
          liquidator: string;
          state: number;
          liquidationTime: BigNumber;
          tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
          lockedCollateral: [BigNumber] & { rawValue: BigNumber };
          liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
          rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
          disputer: string;
          settlementPrice: [BigNumber] & { rawValue: BigNumber };
          finalFee: [BigNumber] & { rawValue: BigNumber };
        })[];
      }
    >;

    liquidationLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidationLiveness()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        sponsor: string;
        liquidator: string;
        state: number;
        liquidationTime: BigNumber;
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        lockedCollateral: [BigNumber] & { rawValue: BigNumber };
        liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
        rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
        disputer: string;
        settlementPrice: [BigNumber] & { rawValue: BigNumber };
        finalFee: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    "liquidations(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        sponsor: string;
        liquidator: string;
        state: number;
        liquidationTime: BigNumber;
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        lockedCollateral: [BigNumber] & { rawValue: BigNumber };
        liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
        rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
        disputer: string;
        settlementPrice: [BigNumber] & { rawValue: BigNumber };
        finalFee: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    minSponsorTokens(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "minSponsorTokens()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    payRegularFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "payRegularFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pfc(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    "pfc()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        withdrawalRequestPassTimestamp: BigNumber;
        withdrawalRequestAmount: [BigNumber] & { rawValue: BigNumber };
        rawCollateral: [BigNumber] & { rawValue: BigNumber };
        transferPositionRequestPassTimestamp: BigNumber;
      }
    >;

    "positions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        withdrawalRequestPassTimestamp: BigNumber;
        withdrawalRequestAmount: [BigNumber] & { rawValue: BigNumber };
        rawCollateral: [BigNumber] & { rawValue: BigNumber };
        transferPositionRequestPassTimestamp: BigNumber;
      }
    >;

    priceIdentifier(overrides?: CallOverrides): Promise<[string]>;

    "priceIdentifier()"(overrides?: CallOverrides): Promise<[string]>;

    rawLiquidationCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "rawLiquidationCollateral()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    rawTotalPositionCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "rawTotalPositionCollateral()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    redeem(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeem((uint256))"(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remargin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "remargin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestTransferPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestTransferPosition()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawal(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestWithdrawal((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleExpired(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "settleExpired()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sponsorDisputeRewardPct(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "sponsorDisputeRewardPct()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    "timerAddress()"(overrides?: CallOverrides): Promise<[string]>;

    tokenCurrency(overrides?: CallOverrides): Promise<[string]>;

    "tokenCurrency()"(overrides?: CallOverrides): Promise<[string]>;

    totalPositionCollateral(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { rawValue: BigNumber }] & {
        totalCollateral: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    "totalPositionCollateral()"(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { rawValue: BigNumber }] & {
        totalCollateral: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    totalTokensOutstanding(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "totalTokensOutstanding()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    transferPositionPassedRequest(
      newSponsorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferPositionPassedRequest(address)"(
      newSponsorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trimExcess(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "trimExcess(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidation(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLiquidation(uint256,address)"(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPassedRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawPassedRequest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawalLiveness()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cancelTransferPosition(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelTransferPosition()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelWithdrawal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelWithdrawal()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralCurrency(overrides?: CallOverrides): Promise<string>;

  "collateralCurrency()"(overrides?: CallOverrides): Promise<string>;

  collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralRequirement()"(overrides?: CallOverrides): Promise<BigNumber>;

  contractState(overrides?: CallOverrides): Promise<number>;

  "contractState()"(overrides?: CallOverrides): Promise<number>;

  create(
    collateralAmount: { rawValue: BigNumberish },
    numTokens: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "create((uint256),(uint256))"(
    collateralAmount: { rawValue: BigNumberish },
    numTokens: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLiquidation(
    sponsor: string,
    minCollateralPerToken: { rawValue: BigNumberish },
    maxCollateralPerToken: { rawValue: BigNumberish },
    maxTokensToLiquidate: { rawValue: BigNumberish },
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createLiquidation(address,(uint256),(uint256),(uint256),uint256)"(
    sponsor: string,
    minCollateralPerToken: { rawValue: BigNumberish },
    maxCollateralPerToken: { rawValue: BigNumberish },
    maxTokensToLiquidate: { rawValue: BigNumberish },
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "cumulativeFeeMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit((uint256))"(
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTo(
    sponsor: string,
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositTo(address,(uint256))"(
    sponsor: string,
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dispute(
    liquidationId: BigNumberish,
    sponsor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "dispute(uint256,address)"(
    liquidationId: BigNumberish,
    sponsor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputeBondPct(overrides?: CallOverrides): Promise<BigNumber>;

  "disputeBondPct()"(overrides?: CallOverrides): Promise<BigNumber>;

  disputerDisputeRewardPct(overrides?: CallOverrides): Promise<BigNumber>;

  "disputerDisputeRewardPct()"(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyShutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyShutdown()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excessTokenBeneficiary(overrides?: CallOverrides): Promise<string>;

  "excessTokenBeneficiary()"(overrides?: CallOverrides): Promise<string>;

  expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "expirationTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  expire(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "expire()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expiryPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "expiryPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  finder(overrides?: CallOverrides): Promise<string>;

  "finder()"(overrides?: CallOverrides): Promise<string>;

  getCollateral(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  "getCollateral(address)"(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidations(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      number,
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      string,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      sponsor: string;
      liquidator: string;
      state: number;
      liquidationTime: BigNumber;
      tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
      lockedCollateral: [BigNumber] & { rawValue: BigNumber };
      liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
      rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
      disputer: string;
      settlementPrice: [BigNumber] & { rawValue: BigNumber };
      finalFee: [BigNumber] & { rawValue: BigNumber };
    })[]
  >;

  "getLiquidations(address)"(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      number,
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      string,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      sponsor: string;
      liquidator: string;
      state: number;
      liquidationTime: BigNumber;
      tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
      lockedCollateral: [BigNumber] & { rawValue: BigNumber };
      liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
      rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
      disputer: string;
      settlementPrice: [BigNumber] & { rawValue: BigNumber };
      finalFee: [BigNumber] & { rawValue: BigNumber };
    })[]
  >;

  liquidationLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidationLiveness()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidations(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      string,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      sponsor: string;
      liquidator: string;
      state: number;
      liquidationTime: BigNumber;
      tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
      lockedCollateral: [BigNumber] & { rawValue: BigNumber };
      liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
      rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
      disputer: string;
      settlementPrice: [BigNumber] & { rawValue: BigNumber };
      finalFee: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  "liquidations(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      string,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      sponsor: string;
      liquidator: string;
      state: number;
      liquidationTime: BigNumber;
      tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
      lockedCollateral: [BigNumber] & { rawValue: BigNumber };
      liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
      rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
      disputer: string;
      settlementPrice: [BigNumber] & { rawValue: BigNumber };
      finalFee: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  minSponsorTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "minSponsorTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  payRegularFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "payRegularFees()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pfc(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  "pfc()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  positions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { rawValue: BigNumber },
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      BigNumber
    ] & {
      tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
      withdrawalRequestPassTimestamp: BigNumber;
      withdrawalRequestAmount: [BigNumber] & { rawValue: BigNumber };
      rawCollateral: [BigNumber] & { rawValue: BigNumber };
      transferPositionRequestPassTimestamp: BigNumber;
    }
  >;

  "positions(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { rawValue: BigNumber },
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      BigNumber
    ] & {
      tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
      withdrawalRequestPassTimestamp: BigNumber;
      withdrawalRequestAmount: [BigNumber] & { rawValue: BigNumber };
      rawCollateral: [BigNumber] & { rawValue: BigNumber };
      transferPositionRequestPassTimestamp: BigNumber;
    }
  >;

  priceIdentifier(overrides?: CallOverrides): Promise<string>;

  "priceIdentifier()"(overrides?: CallOverrides): Promise<string>;

  rawLiquidationCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  "rawLiquidationCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

  rawTotalPositionCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  "rawTotalPositionCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    numTokens: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeem((uint256))"(
    numTokens: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remargin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "remargin()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestTransferPosition(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestTransferPosition()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawal(
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestWithdrawal((uint256))"(
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCurrentTime(uint256)"(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleExpired(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "settleExpired()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sponsorDisputeRewardPct(overrides?: CallOverrides): Promise<BigNumber>;

  "sponsorDisputeRewardPct()"(overrides?: CallOverrides): Promise<BigNumber>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  "timerAddress()"(overrides?: CallOverrides): Promise<string>;

  tokenCurrency(overrides?: CallOverrides): Promise<string>;

  "tokenCurrency()"(overrides?: CallOverrides): Promise<string>;

  totalPositionCollateral(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  "totalPositionCollateral()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  totalTokensOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

  "totalTokensOutstanding()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferPositionPassedRequest(
    newSponsorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferPositionPassedRequest(address)"(
    newSponsorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trimExcess(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "trimExcess(address)"(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw((uint256))"(
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidation(
    liquidationId: BigNumberish,
    sponsor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLiquidation(uint256,address)"(
    liquidationId: BigNumberish,
    sponsor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPassedRequest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawPassedRequest()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawalLiveness()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cancelTransferPosition(overrides?: CallOverrides): Promise<void>;

    "cancelTransferPosition()"(overrides?: CallOverrides): Promise<void>;

    cancelWithdrawal(overrides?: CallOverrides): Promise<void>;

    "cancelWithdrawal()"(overrides?: CallOverrides): Promise<void>;

    collateralCurrency(overrides?: CallOverrides): Promise<string>;

    "collateralCurrency()"(overrides?: CallOverrides): Promise<string>;

    collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralRequirement()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractState(overrides?: CallOverrides): Promise<number>;

    "contractState()"(overrides?: CallOverrides): Promise<number>;

    create(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "create((uint256),(uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    createLiquidation(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        liquidationId: BigNumber;
        tokensLiquidated: [BigNumber] & { rawValue: BigNumber };
        finalFeeBond: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    "createLiquidation(address,(uint256),(uint256),(uint256),uint256)"(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        liquidationId: BigNumber;
        tokensLiquidated: [BigNumber] & { rawValue: BigNumber };
        finalFeeBond: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulativeFeeMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    depositTo(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "depositTo(address,(uint256))"(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    dispute(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "dispute(uint256,address)"(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    disputeBondPct(overrides?: CallOverrides): Promise<BigNumber>;

    "disputeBondPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    disputerDisputeRewardPct(overrides?: CallOverrides): Promise<BigNumber>;

    "disputerDisputeRewardPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyShutdown(overrides?: CallOverrides): Promise<void>;

    "emergencyShutdown()"(overrides?: CallOverrides): Promise<void>;

    excessTokenBeneficiary(overrides?: CallOverrides): Promise<string>;

    "excessTokenBeneficiary()"(overrides?: CallOverrides): Promise<string>;

    expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "expirationTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    expire(overrides?: CallOverrides): Promise<void>;

    "expire()"(overrides?: CallOverrides): Promise<void>;

    expiryPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "expiryPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<string>;

    "finder()"(overrides?: CallOverrides): Promise<string>;

    getCollateral(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "getCollateral(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidations(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        number,
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        sponsor: string;
        liquidator: string;
        state: number;
        liquidationTime: BigNumber;
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        lockedCollateral: [BigNumber] & { rawValue: BigNumber };
        liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
        rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
        disputer: string;
        settlementPrice: [BigNumber] & { rawValue: BigNumber };
        finalFee: [BigNumber] & { rawValue: BigNumber };
      })[]
    >;

    "getLiquidations(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        number,
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        sponsor: string;
        liquidator: string;
        state: number;
        liquidationTime: BigNumber;
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        lockedCollateral: [BigNumber] & { rawValue: BigNumber };
        liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
        rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
        disputer: string;
        settlementPrice: [BigNumber] & { rawValue: BigNumber };
        finalFee: [BigNumber] & { rawValue: BigNumber };
      })[]
    >;

    liquidationLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationLiveness()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        sponsor: string;
        liquidator: string;
        state: number;
        liquidationTime: BigNumber;
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        lockedCollateral: [BigNumber] & { rawValue: BigNumber };
        liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
        rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
        disputer: string;
        settlementPrice: [BigNumber] & { rawValue: BigNumber };
        finalFee: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    "liquidations(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        sponsor: string;
        liquidator: string;
        state: number;
        liquidationTime: BigNumber;
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        lockedCollateral: [BigNumber] & { rawValue: BigNumber };
        liquidatedCollateral: [BigNumber] & { rawValue: BigNumber };
        rawUnitCollateral: [BigNumber] & { rawValue: BigNumber };
        disputer: string;
        settlementPrice: [BigNumber] & { rawValue: BigNumber };
        finalFee: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    minSponsorTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "minSponsorTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    payRegularFees(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "payRegularFees()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    pfc(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "pfc()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        withdrawalRequestPassTimestamp: BigNumber;
        withdrawalRequestAmount: [BigNumber] & { rawValue: BigNumber };
        rawCollateral: [BigNumber] & { rawValue: BigNumber };
        transferPositionRequestPassTimestamp: BigNumber;
      }
    >;

    "positions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        tokensOutstanding: [BigNumber] & { rawValue: BigNumber };
        withdrawalRequestPassTimestamp: BigNumber;
        withdrawalRequestAmount: [BigNumber] & { rawValue: BigNumber };
        rawCollateral: [BigNumber] & { rawValue: BigNumber };
        transferPositionRequestPassTimestamp: BigNumber;
      }
    >;

    priceIdentifier(overrides?: CallOverrides): Promise<string>;

    "priceIdentifier()"(overrides?: CallOverrides): Promise<string>;

    rawLiquidationCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "rawLiquidationCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    rawTotalPositionCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "rawTotalPositionCollateral()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      numTokens: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "redeem((uint256))"(
      numTokens: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    remargin(overrides?: CallOverrides): Promise<void>;

    "remargin()"(overrides?: CallOverrides): Promise<void>;

    requestTransferPosition(overrides?: CallOverrides): Promise<void>;

    "requestTransferPosition()"(overrides?: CallOverrides): Promise<void>;

    requestWithdrawal(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "requestWithdrawal((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleExpired(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "settleExpired()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    sponsorDisputeRewardPct(overrides?: CallOverrides): Promise<BigNumber>;

    "sponsorDisputeRewardPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    "timerAddress()"(overrides?: CallOverrides): Promise<string>;

    tokenCurrency(overrides?: CallOverrides): Promise<string>;

    "tokenCurrency()"(overrides?: CallOverrides): Promise<string>;

    totalPositionCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "totalPositionCollateral()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    totalTokensOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTokensOutstanding()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferPositionPassedRequest(
      newSponsorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferPositionPassedRequest(address)"(
      newSponsorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trimExcess(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "trimExcess(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    withdraw(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "withdraw((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    withdrawLiquidation(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "withdrawLiquidation(uint256,address)"(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    withdrawPassedRequest(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "withdrawPassedRequest()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    withdrawalLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalLiveness()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    ContractExpired(
      caller: string | null
    ): TypedEventFilter<[string], { caller: string }>;

    Deposit(
      sponsor: string | null,
      collateralAmount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    DisputeSettled(
      caller: string | null,
      sponsor: string | null,
      liquidator: string | null,
      disputer: null,
      liquidationId: null,
      disputeSucceeded: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, boolean],
      {
        caller: string;
        sponsor: string;
        liquidator: string;
        disputer: string;
        liquidationId: BigNumber;
        disputeSucceeded: boolean;
      }
    >;

    EmergencyShutdown(
      caller: string | null,
      originalExpirationTimestamp: null,
      shutdownTimestamp: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        caller: string;
        originalExpirationTimestamp: BigNumber;
        shutdownTimestamp: BigNumber;
      }
    >;

    EndedSponsorPosition(
      sponsor: string | null
    ): TypedEventFilter<[string], { sponsor: string }>;

    FinalFeesPaid(
      amount: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    LiquidationCreated(
      sponsor: string | null,
      liquidator: string | null,
      liquidationId: BigNumberish | null,
      tokensOutstanding: null,
      lockedCollateral: null,
      liquidatedCollateral: null,
      liquidationTime: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sponsor: string;
        liquidator: string;
        liquidationId: BigNumber;
        tokensOutstanding: BigNumber;
        lockedCollateral: BigNumber;
        liquidatedCollateral: BigNumber;
        liquidationTime: BigNumber;
      }
    >;

    LiquidationDisputed(
      sponsor: string | null,
      liquidator: string | null,
      disputer: string | null,
      liquidationId: null,
      disputeBondAmount: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        sponsor: string;
        liquidator: string;
        disputer: string;
        liquidationId: BigNumber;
        disputeBondAmount: BigNumber;
      }
    >;

    LiquidationWithdrawn(
      caller: string | null,
      withdrawalAmount: null,
      liquidationStatus: BigNumberish | null,
      settlementPrice: null
    ): TypedEventFilter<
      [string, BigNumber, number, BigNumber],
      {
        caller: string;
        withdrawalAmount: BigNumber;
        liquidationStatus: number;
        settlementPrice: BigNumber;
      }
    >;

    NewSponsor(
      sponsor: string | null
    ): TypedEventFilter<[string], { sponsor: string }>;

    PositionCreated(
      sponsor: string | null,
      collateralAmount: BigNumberish | null,
      tokenAmount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sponsor: string; collateralAmount: BigNumber; tokenAmount: BigNumber }
    >;

    Redeem(
      sponsor: string | null,
      collateralAmount: BigNumberish | null,
      tokenAmount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sponsor: string; collateralAmount: BigNumber; tokenAmount: BigNumber }
    >;

    RegularFeesPaid(
      regularFee: BigNumberish | null,
      lateFee: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { regularFee: BigNumber; lateFee: BigNumber }
    >;

    RequestTransferPosition(
      oldSponsor: string | null
    ): TypedEventFilter<[string], { oldSponsor: string }>;

    RequestTransferPositionCanceled(
      oldSponsor: string | null
    ): TypedEventFilter<[string], { oldSponsor: string }>;

    RequestTransferPositionExecuted(
      oldSponsor: string | null,
      newSponsor: string | null
    ): TypedEventFilter<
      [string, string],
      { oldSponsor: string; newSponsor: string }
    >;

    RequestWithdrawal(
      sponsor: string | null,
      collateralAmount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    RequestWithdrawalCanceled(
      sponsor: string | null,
      collateralAmount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    RequestWithdrawalExecuted(
      sponsor: string | null,
      collateralAmount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;

    SettleExpiredPosition(
      caller: string | null,
      collateralReturned: BigNumberish | null,
      tokensBurned: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { caller: string; collateralReturned: BigNumber; tokensBurned: BigNumber }
    >;

    Withdrawal(
      sponsor: string | null,
      collateralAmount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; collateralAmount: BigNumber }
    >;
  };

  estimateGas: {
    cancelTransferPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelTransferPosition()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelWithdrawal()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralCurrency()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralRequirement()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractState(overrides?: CallOverrides): Promise<BigNumber>;

    "contractState()"(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "create((uint256),(uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLiquidation(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createLiquidation(address,(uint256),(uint256),(uint256),uint256)"(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulativeFeeMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTo(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositTo(address,(uint256))"(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dispute(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "dispute(uint256,address)"(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputeBondPct(overrides?: CallOverrides): Promise<BigNumber>;

    "disputeBondPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    disputerDisputeRewardPct(overrides?: CallOverrides): Promise<BigNumber>;

    "disputerDisputeRewardPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyShutdown()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excessTokenBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    "excessTokenBeneficiary()"(overrides?: CallOverrides): Promise<BigNumber>;

    expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "expirationTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    expire(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "expire()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expiryPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "expiryPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    "finder()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateral(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateral(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidations(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidations(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationLiveness()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidations(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minSponsorTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "minSponsorTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    payRegularFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "payRegularFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pfc(overrides?: CallOverrides): Promise<BigNumber>;

    "pfc()"(overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "positions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceIdentifier(overrides?: CallOverrides): Promise<BigNumber>;

    "priceIdentifier()"(overrides?: CallOverrides): Promise<BigNumber>;

    rawLiquidationCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "rawLiquidationCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    rawTotalPositionCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "rawTotalPositionCollateral()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeem((uint256))"(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remargin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "remargin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestTransferPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestTransferPosition()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawal(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestWithdrawal((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleExpired(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "settleExpired()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sponsorDisputeRewardPct(overrides?: CallOverrides): Promise<BigNumber>;

    "sponsorDisputeRewardPct()"(overrides?: CallOverrides): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "timerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenCurrency()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositionCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPositionCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokensOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTokensOutstanding()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferPositionPassedRequest(
      newSponsorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferPositionPassedRequest(address)"(
      newSponsorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trimExcess(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "trimExcess(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidation(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLiquidation(uint256,address)"(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPassedRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawPassedRequest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalLiveness()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelTransferPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelTransferPosition()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelWithdrawal()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralCurrency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralCurrency()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralRequirement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralRequirement()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "create((uint256),(uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLiquidation(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createLiquidation(address,(uint256),(uint256),(uint256),uint256)"(
      sponsor: string,
      minCollateralPerToken: { rawValue: BigNumberish },
      maxCollateralPerToken: { rawValue: BigNumberish },
      maxTokensToLiquidate: { rawValue: BigNumberish },
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cumulativeFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cumulativeFeeMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTo(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositTo(address,(uint256))"(
      sponsor: string,
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dispute(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "dispute(uint256,address)"(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputeBondPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "disputeBondPct()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputerDisputeRewardPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "disputerDisputeRewardPct()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyShutdown()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excessTokenBeneficiary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "excessTokenBeneficiary()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expirationTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "expirationTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expire(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "expire()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expiryPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "expiryPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateral(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateral(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidations(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidations(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationLiveness(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationLiveness()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidations(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minSponsorTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minSponsorTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payRegularFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "payRegularFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pfc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pfc()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceIdentifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceIdentifier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawLiquidationCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rawLiquidationCollateral()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawTotalPositionCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rawTotalPositionCollateral()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeem((uint256))"(
      numTokens: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remargin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "remargin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestTransferPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestTransferPosition()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawal(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestWithdrawal((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleExpired(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "settleExpired()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sponsorDisputeRewardPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sponsorDisputeRewardPct()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timerAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenCurrency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPositionCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalPositionCollateral()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTokensOutstanding(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalTokensOutstanding()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferPositionPassedRequest(
      newSponsorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferPositionPassedRequest(address)"(
      newSponsorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trimExcess(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "trimExcess(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidation(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLiquidation(uint256,address)"(
      liquidationId: BigNumberish,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPassedRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawPassedRequest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalLiveness(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalLiveness()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
